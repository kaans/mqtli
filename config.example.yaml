broker:
  client_id: "my_client_id"
  username: "yourusernamehere"
  password: "yourpasswordhere"

  use_tls: false

  last_will:
    topic: "mqtli/lwt"
    payload: "Good bye"

topics:
  - topic: mqtli/test
    subscription:
      enabled: false
      qos: 1
      outputs:
        - format:
            type: yaml
        - format:
            type: json
        - format:
            type: text
        - format:
            type: hex
        - format:
            type: base64
        - format:
            type: raw
        - format:
            type: base64
          target:
            type: file
            path: "log.txt"
            overwrite: false
            prepend: "MESSAGE: " # prepends the string "MESSAGE: " to the beginning of the base64 encoded message
            append: "\n" # appends a new line to the end of the message
    payload:
      type: raw
    publish:
      enabled: false
      input:
        type: hex
        content: AB23F6E983
      trigger:
        - type: periodic # default trigger: periodic with no count (indefinitely) and interval 1 second

  - topic: mqtli/protobuf
    subscription:
      enabled: true
      qos: 1
      outputs:
        - format:
            type: yaml
        - format:
            type: json
        - format:
            type: text
        - format:
            type: hex
        - format:
            type: base64
        - format:
            type: raw
        - format:
            type: base64
          target:
            type: file
            path: "log.txt"
            overwrite: false
            prepend: "MESSAGE: " # prepends the string "MESSAGE: " to the beginning of the base64 encoded message
            append: "\n" # appends a new line to the end of the message
    payload:
      type: protobuf
      definition: "test/data/message.proto"
      message: "Response" # Response is the name of the protobuf message
    publish:
      enabled: true
      input:
        type: hex
        content: 082d12080a066b696e646f66180222024142 # this must be a valid protobuf message according to the payload format (encoded as hex)
      trigger:
        - type: periodic # default trigger: periodic with no count (indefinitely) and interval 1 second

  - topic: mqtli/json
    subscription:
      enabled: true
      qos: 1
      outputs:
        - format:
            type: yaml
        - format:
            type: base64
          target:
            type: topic
            topic: mqtli/json/output
      # these filters extract the field "name" of all array entries with key "array",
      # convert it to text and change the case to upper case.
      # Note that in this example, two messages are generated and sent to the output topic,
      # one message for each name.
      filters:
        - type: extract_json
          jsonpath: $.array[*].name
        - type: to_text
        - type: to_upper
    payload:
      type: json
    publish:
      enabled: true
      input:
        type: json
        content: |
          {
            "array": [
              "name": "John",
              "age": 32
            ], [
              "name": "Sandy",
              "age": 31
            ]
          }
      trigger:
        - type: periodic # default trigger: periodic with no count (indefinitely) and interval 1 second

  - topic: mqtli/text
    subscription:
      enabled: true
      qos: 1
      outputs:
        - format:
            type: text
      # these filters take the received payload, converts it to json,
      # extracts the name and sets it to all uppercase
      filters:
        - type: to_json
        - type: extract_json
          jsonpath: $.name
        - type: to_text
        - type: to_upper
    payload:
      type: text
    publish:
      enabled: true
      input:
        type: text
        content: |
          {
            "array": [
              "name": "John",
              "age": 32
            ], [
              "name": "Sandy",
              "age": 31
            ]
          }
      # these filters convert the text input to json and extract
      # the first array element before sending it onto the topic
      filters:
        - type: to_json
        - type: extract_json
          jsonpath: $.array[0]
      trigger:
        - type: periodic # default trigger: periodic with no count (indefinitely) and interval 1 second
